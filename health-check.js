import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

async function healthCheck() {
    console.log('üîç Iniciando verificaci√≥n de salud del sistema SITMAH...\n');
    
    try {
        // 1. Verificar conexi√≥n a MongoDB
        console.log('1Ô∏è‚É£ Verificando conexi√≥n a MongoDB...');
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Conexi√≥n a MongoDB exitosa');
        
        // 2. Verificar modelos
        console.log('\n2Ô∏è‚É£ Verificando modelos de datos...');
        const models = ['Apertura', 'Programacion', 'Operador', 'Usuario'];
        for (const modelName of models) {
            try {
                const model = mongoose.model(modelName);
                console.log(`‚úÖ Modelo ${modelName} cargado correctamente`);
            } catch (error) {
                console.log(`‚ùå Error al cargar modelo ${modelName}:`, error.message);
            }
        }
        
        // 3. Verificar variables de entorno cr√≠ticas
        console.log('\n3Ô∏è‚É£ Verificando variables de entorno...');
        const requiredEnvVars = ['MONGODB_URI', 'PORT'];
        for (const envVar of requiredEnvVars) {
            if (process.env[envVar]) {
                console.log(`‚úÖ ${envVar} configurada`);
            } else {
                console.log(`‚ùå ${envVar} no configurada`);
            }
        }
        
        // 4. Verificar puerto disponible
        console.log('\n4Ô∏è‚É£ Verificando puerto del servidor...');
        const port = process.env.PORT || 5000;
        console.log(`‚úÖ Puerto configurado: ${port}`);
        
        console.log('\nüéâ Verificaci√≥n de salud completada exitosamente!');
        console.log('üöÄ El sistema est√° listo para producci√≥n.');
        
    } catch (error) {
        console.error('\n‚ùå Error durante la verificaci√≥n de salud:', error.message);
        process.exit(1);
    } finally {
        await mongoose.disconnect();
        console.log('\nüîå Conexi√≥n a MongoDB cerrada');
    }
}

// Ejecutar verificaci√≥n
healthCheck(); 